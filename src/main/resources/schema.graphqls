type Query {
    allPokemon: [Pokemon]
    allTrainers: [Trainer]
    trainerByName(name: String): Trainer
    speciesByType(type: PokemonType): [Species]
}

type Mutation {
    createSpecies(species: CreateSpeciesInput!): Species @auth(role: "admin")
    createTrainer(trainer: CreateTrainerInput!): Trainer
    catchPokemon(trainerId: ID!, pokemon: CreatePokemonInput!): Trainer
}

input CreateSpeciesInput {
    name: String!
    type: PokemonType!
}

input CreateTrainerInput {
    name: String!
}

input CreatePokemonInput {
    name: String!
    speciesId: ID!
}

type Pokemon {
    id: ID
    name: String
    species: Species
    trainer: Trainer
}

type Species {
    id: ID
    name: String
    type: PokemonType
    pokemons: [Pokemon]
}

enum PokemonType {
    NORMAL
    FIRE
    WATER
    GRASS
    FLYING
    FIGHTING
    POISON
    ELECTRIC
    GROUND
    ROCK
    PSYCHIC
    ICE
    BUG
    GHOST
    STEEL
    STONE
    DRAGON
    DARK
    FAIRY
}

type Trainer {
    id: ID!
    name: String!
    pokemons: [Pokemon]
}

directive @auth(role: String!) on FIELD_DEFINITION
